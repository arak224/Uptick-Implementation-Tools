"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isTargetOptionDeleted = exports.isFieldEmpty = exports.handleMultiSelectOptionToggle = exports.getTemplateWithLookups = exports.getMultiSelectFieldValue = exports.getImportFieldValues = exports.getDefaultOption = exports.getDefaultFieldValuesFromTemplate = exports.getChartFieldValue = exports["default"] = void 0;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _chartHelper = require("./chartHelper");
var _tableHelper = require("./tableHelper");
var _generateObjectId = _interopRequireDefault(require("./generateObjectId"));
var _FieldTypes = _interopRequireDefault(require("./constants/FieldTypes"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * Get chart field line data
 *
 * @param (String|Object) value
 */
var getChartFieldValue = exports.getChartFieldValue = function getChartFieldValue(value) {
  var parsedData = value || [];
  if (value && typeof value === 'string') {
    parsedData = JSON.parse(value);
  }
  if (parsedData && parsedData.length > 0) {
    parsedData = parsedData.filter(function (line) {
      return !line.deleted;
    });
  }
  return (0, _toConsumableArray2["default"])(parsedData);
};

/**
 * Get default option
 *
 * These options are primarily used by dropdown and selection fields
 *
 * @param {String} value
 * @return {Object}
 */
var getDefaultOption = exports.getDefaultOption = function getDefaultOption(value) {
  return {
    _id: (0, _generateObjectId["default"])(),
    value: value || 'Option',
    deleted: false
  };
};

/**
 * Get multiselect field value
 *
 * @param (String|Array) value
 * @return Array
 */
var getMultiSelectFieldValue = exports.getMultiSelectFieldValue = function getMultiSelectFieldValue(value) {
  if (value && typeof value === 'string') {
    return value.replace(/\s/g, '').split(','); //Legacy (document v1) support for multiSelect value
  } else if (value && Array.isArray(value)) {
    return (0, _toConsumableArray2["default"])(value);
  } else {
    return [];
  }
};

/**
 * Update the selected options.
 *
 * @param (Bool) multi
 * @param (Array) selectedOptions //[optionId, optionId, ...]
 * @param (String) optionId //Option that is being toggled
 */
var handleMultiSelectOptionToggle = exports.handleMultiSelectOptionToggle = function handleMultiSelectOptionToggle(multi) {
  var selectedOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var optionId = arguments.length > 2 ? arguments[2] : undefined;
  var nextSelection = (0, _toConsumableArray2["default"])(selectedOptions);
  var optionIndex = nextSelection.indexOf(optionId);
  if (multi) {
    if (optionIndex !== -1) {
      nextSelection.splice(optionIndex, 1);
    } else if (multi) {
      nextSelection.push(optionId);
    }
  } else {
    //Not multi
    if (optionIndex !== -1) {
      nextSelection = [];
    } else {
      nextSelection = [optionId];
    }
  }
  return nextSelection;
};

/**
 * Get default field values from template
 *
 * @param {Object} template
 * @param {String} defaultUserId
 */
var getDefaultFieldValuesFromTemplate = exports.getDefaultFieldValuesFromTemplate = function getDefaultFieldValuesFromTemplate(template, defaultUserId) {
  var fields = {};
  template.fields.forEach(function (field) {
    if (!field || field.deleted || field.type === _FieldTypes["default"].uniqueId || field.type === _FieldTypes["default"].task || field.type === _FieldTypes["default"].signature || field.type === _FieldTypes["default"].file || field.type === _FieldTypes["default"].image || field.type === _FieldTypes["default"].richText) {
      return;
    }
    if (field.value) {
      fields[field._id] = field.value;
    }
    if (field.type === _FieldTypes["default"].table) {
      fields[field._id] = field.value ? JSON.stringify((0, _tableHelper.getRows)(field.value)) : JSON.stringify([(0, _tableHelper.getDefaultRow)()]);
    }
    if (field.type === _FieldTypes["default"].chart) {
      fields[field._id] = JSON.stringify([(0, _chartHelper.getDefaultLine)()]);
    }
    if (field.type === _FieldTypes["default"].inputGroup) {
      var newRow = (0, _tableHelper.getDefaultRow)();
      field.tableColumns.forEach(function (column) {
        if (column.value) newRow.cells[column._id] = column.value;
      });
      fields[field._id] = JSON.stringify([newRow]);
    }
    if (field.type === _FieldTypes["default"].multiSelect) {
      fields[field._id] = field.value && Array.isArray(field.value) ? field.value.join(',') : '';
    }
    if (field.type === _FieldTypes["default"].user) {
      fields[field._id] = field.value || defaultUserId;
    }
    if (field.type === _FieldTypes["default"].date) {
      fields[field._id] = field.blockAutoPopulate ? '' : field.value || new Date().getTime();
    }
  });
  return fields;
};

/**
 * Get import field values from source document for target document
 *
 * @param {Object} template
 * @param {Object} importSource //Document source you're importing
 * @param {Object} importTarget //Document that is having it's fields overwritten by import source
 */
var getImportFieldValues = exports.getImportFieldValues = function getImportFieldValues(template, importSource, importTarget) {
  var fields = {};
  template.fields.forEach(function (field) {
    //Document field value that is being imported
    var sourceFieldValue = importSource.fields[field._id];

    //Document field value that is being overwritten
    var targetFieldValue = importTarget.fields[field._id];
    if (field.deleted || field.blockImport || field.type === _FieldTypes["default"].uniqueId || field.type === _FieldTypes["default"].task || field.type === _FieldTypes["default"].signature || field.type === _FieldTypes["default"].file || field.type === _FieldTypes["default"].richText || field.type === _FieldTypes["default"].image) {
      return;
    } else if ((field.type === _FieldTypes["default"].table || field.type === _FieldTypes["default"].inputGroup) && sourceFieldValue) {
      var nextTableFieldValues = [];
      var rows = (0, _tableHelper.getRows)(sourceFieldValue);
      var currentDocRows = targetFieldValue ? (0, _tableHelper.getRows)(targetFieldValue) : [];
      rows.forEach(function (row, i) {
        var newRow = _objectSpread(_objectSpread({}, row), {}, {
          cells: {}
        });
        field.tableColumns.forEach(function (column) {
          /**
           * Option 1: Add cell value from source document
           */
          if (!column.blockImport) {
            newRow.cells[column._id] = row.cells[column._id] || '';
          }
          /**
           * Option 2: If column has block import enabled then maintain any values
           * already set in the importTarget document.
           */else if (column.blockImport && currentDocRows[i] && currentDocRows[i].cells[column._id]) {
            newRow.cells[column._id] = currentDocRows[i].cells[column._id];
          }
          /**
           * Option 3: If column has block import enabled then add default column value
           */else if (column.blockImport && column.value) {
            newRow.cells[column._id] = column.value;
          }
        });
        nextTableFieldValues.push(newRow);
      });
      fields[field._id] = JSON.stringify(nextTableFieldValues);
    } else if (field.type === _FieldTypes["default"].chart && sourceFieldValue) {
      fields[field._id] = (0, _typeof2["default"])(sourceFieldValue) === 'object' ? JSON.stringify(sourceFieldValue) : sourceFieldValue;
    } else if (field.type === _FieldTypes["default"].multiSelect && sourceFieldValue) {
      fields[field._id] = typeof sourceFieldValue !== 'string' ? sourceFieldValue.join(',') : sourceFieldValue;
    } else if (sourceFieldValue) {
      fields[field._id] = sourceFieldValue;
    }
  });
  return fields;
};

/**
 *  Generate optionsLookup  and fieldLookup for template fields
 * Note: Options lookup will be used by dropdown, mutliSelect, table and inputGroup fields
 * to display value in dropdowns
 * @param {} template
 * @returns template
 */

var getTemplateWithLookups = exports.getTemplateWithLookups = function getTemplateWithLookups(template) {
  var nextTemplate = _objectSpread({}, template);
  nextTemplate.fields = [];
  nextTemplate.fieldLookup = {};
  template.fields.forEach(function (field) {
    var nextField = _objectSpread({}, field);
    nextField.optionsLookup = {};
    if (nextField.options) {
      nextField.options.forEach(function (option) {
        return nextField.optionsLookup[option._id] = option;
      });
    }
    if (nextField.tableColumns) {
      nextField.tableColumnsLookup = {};
      nextField.tableColumns.forEach(function (column, index) {
        var nextColumn = _objectSpread(_objectSpread({}, column), {}, {
          optionsLookup: {}
        });
        if (nextColumn.options) {
          nextColumn.options.forEach(function (option) {
            return nextColumn.optionsLookup[option._id] = option;
          });
        }
        nextField.tableColumns[index] = nextColumn;
      });
    }
    nextTemplate.fields.push(nextField);
    nextTemplate.fieldLookup[nextField._id] = nextField;
  });
  return nextTemplate;
};

/**
 * This method checks if the field passed via input is empty by checking
 * the field.value.
 * @param {*} fieldProps
 * @returns
 */

var isFieldEmpty = exports.isFieldEmpty = function isFieldEmpty(fieldType, fieldValue, fieldOptions) {
  var isEmpty = false;
  if (fieldType === _FieldTypes["default"].text && (!fieldValue || fieldValue && fieldValue.replace(/\s+/g, '').length === 0)) {
    isEmpty = true;
  } else if (fieldType === _FieldTypes["default"].textarea && (!fieldValue || fieldValue && fieldValue.replace(/\s+/g, '').length === 0)) {
    isEmpty = true;
  } else if (fieldType === _FieldTypes["default"].number && typeof fieldValue !== 'number') {
    isEmpty = true;
  } else if (fieldType === _FieldTypes["default"].date && !fieldValue) {
    isEmpty = true;
  } else if (fieldType === _FieldTypes["default"].signature && !fieldValue) {
    isEmpty = true;
  } else if (fieldType === _FieldTypes["default"].dropdown && (!fieldValue || fieldValue && fieldOptions.length > 0 && isTargetOptionDeleted(fieldValue, fieldOptions))) {
    isEmpty = true;
  } else if (fieldType === _FieldTypes["default"].multiSelect && (!fieldValue || fieldValue && fieldOptions.length > 0 && isTargetOptionDeleted(fieldValue, fieldOptions))) {
    isEmpty = true;
  } else if (fieldType === _FieldTypes["default"].image && (!fieldValue || fieldValue && fieldValue.length === 0)) {
    isEmpty = true;
  } else if (fieldType === _FieldTypes["default"].file && (!fieldValue || fieldValue && fieldValue.length === 0)) {
    isEmpty = true;
  } else if (fieldType === _FieldTypes["default"].chart && (!fieldValue || fieldValue && fieldValue.length === 0)) {
    isEmpty = true;
  } else if (fieldType === _FieldTypes["default"].table && (!fieldValue || fieldValue && fieldValue.filter(function (item) {
    return !item.deleted;
  }).length === 0)) {
    isEmpty = true;
  }
  return isEmpty;
};

/**
 * This function checks whether an option associated with multiselect or dropdown
 * field is deleted.
 * @param {*} value // value
 * @param {*} options
 */
var isTargetOptionDeleted = exports.isTargetOptionDeleted = function isTargetOptionDeleted(value, options) {
  /***
   * We are converting the value that is passed in to array since
   * this method is used by dropdown field and multiSelect field
   * Dropdown passes the value as a string  whereas mutliselect passes
   * the value as an array
   */
  var nextValue = Array.isArray(value) ? value : [value];
  if (!nextValue || nextValue.length === 0) return true;
  var optionsLookup = {};
  options.forEach(function (option) {
    optionsLookup[option._id] = option;
  });
  var undeletedOptions = nextValue.filter(function (item) {
    return optionsLookup[item] && !optionsLookup[item].deleted;
  });
  var result = !(undeletedOptions.length > 0);
  return result;
};
var _default = exports["default"] = {
  getDefaultOption: getDefaultOption,
  getChartFieldValue: getChartFieldValue,
  getMultiSelectFieldValue: getMultiSelectFieldValue,
  handleMultiSelectOptionToggle: handleMultiSelectOptionToggle,
  getDefaultFieldValuesFromTemplate: getDefaultFieldValuesFromTemplate,
  getImportFieldValues: getImportFieldValues,
  getTemplateWithLookups: getTemplateWithLookups,
  isFieldEmpty: isFieldEmpty,
  isTargetOptionDeleted: isTargetOptionDeleted
};