"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFormattedActivity = exports["default"] = exports.addDocumentDataToActivities = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _ActivityTypes = _interopRequireDefault(require("./constants/ActivityTypes"));
var _FileTypes = _interopRequireDefault(require("./constants/FileTypes"));
var _FieldTypes = _interopRequireDefault(require("./constants/FieldTypes"));
var _tableHelper = require("./tableHelper");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var getFormattedActivity = exports.getFormattedActivity = function getFormattedActivity(comments, deficiencies, files) {
  var activity = [];
  if (comments && comments.length > 0) {
    comments.forEach(function (comment) {
      if (comment.deleted) return;
      activity.push(_objectSpread({
        type: _ActivityTypes["default"].comment,
        visibility: comment.visibility || 'private',
        //Legacy comments are private to the submission
        description: comment.text,
        files: comment.files || []
      }, comment));
    });
  }
  if (files && files.length > 0) {
    files.forEach(function (file) {
      if (file.deleted || file.type === _FileTypes["default"].signature) return;
      activity.push({
        type: _ActivityTypes["default"].file,
        visibility: 'public',
        //Legacy files are public to the submission
        _id: file._id,
        files: [file],
        createdOn: file.createdOn,
        createdBy: file.createdBy
      });
    });
  }
  if (deficiencies && deficiencies.length > 0) {
    deficiencies.forEach(function (deficiency) {
      if (deficiency.deleted) return;
      activity.push(_objectSpread({
        type: _ActivityTypes["default"].deficiency,
        visibility: deficiency.visibiltiy || 'public',
        //Legacy deficiencies are public to the submission
        files: deficiency.files || []
      }, deficiency));
    });
  }
  activity.sort(function (a, b) {
    return a.createdOn - b.createdOn;
  });
  return activity;
};

/**
 *
 * Template should be a template that is using the new getTemplateWithLookups
 */
var addDocumentDataToActivities = exports.addDocumentDataToActivities = function addDocumentDataToActivities(activities, doc, template) {
  var templateFieldLookup = {};
  if (template.fields && template.fields.length > 0) {
    template.fields.forEach(function (field) {
      return templateFieldLookup[field._id] = field;
    });
  }
  var fieldValues = doc && doc.fields ? doc.fields : null;
  var fieldSettings = doc && doc.fieldSettings ? doc.fieldSettings : {};
  if (!activities || activities.length < 1 || !templateFieldLookup || !fieldValues) return activities;
  var fieldRowsLookup = {};
  var fieldRowIndexLookup = {};
  var nextActivities = [];
  activities.forEach(function (activity) {
    var nextActivity = _objectSpread({}, activity);
    if (activity.document && activity.document.field) {
      var docFieldValue = fieldValues[activity.document.field];
      var templateField = templateFieldLookup[activity.document.field] || {};
      nextActivity.document.title = templateField.title;
      nextActivity.document.type = templateField.type;
      nextActivity.document.columns = templateField.tableColumns;
      if (docFieldValue && templateField.type === _FieldTypes["default"].table) {
        /**
         * Table Step 1: create an easy way to lookup a row with the dropdown cells populated.
         *
         * We only need to generate the row lookup once per field to help increase performance,
         * just incase we have other deficiencies that reference the same table field.
         */

        /**
         * Removing deleted rows from doc field value
         * Added as a fix for table bug that did not display proper output for formula cells
         *  as rowIndex was messy
         */
        var nextDocFieldValue = (0, _tableHelper.getRows)(docFieldValue);
        if (!fieldRowsLookup[templateField._id]) {
          fieldRowsLookup[templateField._id] = (0, _tableHelper.getTableRowLookupWithPopulatedDropdownCells)(templateField.tableColumns, nextDocFieldValue);
        }

        /**
         * Table Step 2: create an easy way to lookup a row index so we can use it in our row
         * display component.
         *
         * We only need to generate the row index lookup once per field to help increase performance,
         * just incase we have other deficiencies that reference the same table field.
         */
        if (!fieldRowIndexLookup[templateField._id]) {
          fieldRowIndexLookup[templateField._id] = (0, _tableHelper.getRowIndexLookup)(templateField._id, fieldSettings, docFieldValue);
        }

        /**
         * Table Step 3: Add row and rowIndex to the activity.document object for easy reference.
         *
         * nextActivity.document.value will now contain the single row object with all cell values populated ready to be displayed
         */

        if (fieldRowsLookup[activity.document.field] && fieldRowIndexLookup[activity.document.field]) {
          nextActivity.document.value = fieldRowsLookup[activity.document.field][activity.document.row];
          nextActivity.document.rowIndex = fieldRowIndexLookup[activity.document.field][activity.document.row];
        }
      } else if (docFieldValue && templateField.type === _FieldTypes["default"].inputGroup) {
        /**
         * Input Group Step 1: create an easy way to lookup a row with the dropdown cells populated.
         *
         * We only need to generate the row lookup once per field (since input groups are just rows)
         * to help increase performance, just incase we have other deficiencies that reference the same table field.
         */
        if (!fieldRowsLookup[templateField._id]) fieldRowsLookup[templateField._id] = (0, _tableHelper.getInputGroupRowLookupWithPopulatedDropdownCells)(templateField.tableColumns, docFieldValue);

        /**
         * Input Group Step 2: Add invidual row.cell value. We only add the invidual cell value and not the
         * whole row because input group display components are treated like regular field and not like table rows.
         */

        if (fieldRowsLookup[activity.document.field] && fieldRowsLookup[activity.document.field][activity.document.row] && fieldRowsLookup[activity.document.field][activity.document.row].cells[activity.document.column]) {
          nextActivity.document.value = fieldRowsLookup[activity.document.field][activity.document.row].cells[activity.document.column];
        }
      } else if (docFieldValue && templateField.type === _FieldTypes["default"].multiSelect) {
        var parsedDocFieldValue = docFieldValue && typeof docFieldValue === 'string' ? docFieldValue.split(',') : docFieldValue;
        var _nextDocFieldValue = '';
        if (parsedDocFieldValue.length > 0) {
          parsedDocFieldValue.forEach(function (item) {
            var option = templateField.optionsLookup[item];
            if (!option) return;
            _nextDocFieldValue = _nextDocFieldValue.concat(option.value, ', ');
          });
        }
        nextActivity.document.value = _nextDocFieldValue;
      }

      //This should handle adding the display value for selection and regular input fields
      else if (templateField.optionsLookup) {
        var option = templateField.optionsLookup[docFieldValue];
        nextActivity.document.value = option && option.value ? option.value : docFieldValue;
      }
    }
    nextActivities.push(nextActivity);
  });
  return nextActivities;
};
var _default = exports["default"] = {
  getFormattedActivity: getFormattedActivity,
  addDocumentDataToActivities: addDocumentDataToActivities
};